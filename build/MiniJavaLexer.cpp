// MiniJavaLexer.cpp generated by reflex 5.1.1 from /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l

#define REFLEX_VERSION "5.1.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_header_file         "MiniJavaLexer.hpp"
#define REFLEX_OPTION_lex                 nextToken
#define REFLEX_OPTION_lexer               MiniJavaLexer
#define REFLEX_OPTION_outfile             "MiniJavaLexer.cpp"
#define REFLEX_OPTION_params              Expr::Parser::value_type *yylval

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 18 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"

    #include "MiniJavaParser.hpp"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS INCLUDE                                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "MiniJavaLexer.hpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 6 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"

 #include <iostream>
 #include "MiniJavaLexer.hpp"
 #include "MiniJavaParser.hpp"

 int num_lines = 0;
 int num_chars = 0;
 int eof_returned = 0;




////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int MiniJavaLexer::nextToken(Expr::Parser::value_type *yylval)
{
  static const char *REGEX_INITIAL = "(?m)([\\x09\\x0d\\x20]+)|(\\n)|((?:\\Q//\\E).*)|((?:\\Q/*\\E))|((?:\\Q;\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q[\\E))|((?:\\Q]\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q,\\E))|((?:\\Q&&\\E))|((?:\\Q||\\E))|((?:\\Q!\\E))|((?:\\Q>\\E))|((?:\\Q<\\E))|((?:\\Q>=\\E))|((?:\\Q<=\\E))|((?:\\Q==\\E))|((?:\\Q!=\\E))|((?:\\Q=\\E))|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q*\\E))|((?:\\Q/\\E))|((?:\\Q%\\E))|((?:\\Qclass\\E))|((?:\\Qint\\E))|((?:\\Qvoid\\E))|((?:\\Qref\\E))|((?:\\Qif\\E))|((?:\\Qelse\\E))|((?:\\Qwhile\\E))|((?:\\Qreturn\\E))|((?:\\Qread\\E))|((?:\\Qprint\\E))|((?:(?:\\Q-\\E))?(?:[0-9])+)|(\"(?:[^\"\\x5c]|\\\\.)*\")|([A-Z_a-z][0-9A-Z_a-z]*)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  static const char *REGEX_COMMENT = "(?m)([^\\x2a]+)|((?:\\Q*\\E)+[^\\x2a/]*)|((?:\\Q*\\E)+(?:\\Q/\\E))";
  static const reflex::Pattern PATTERN_COMMENT(REGEX_COMMENT);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 108 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{
    if (eof_returned == 0) {
        eof_returned = 1;
        return Token::EndOfFile;
    } else {
        return 0;
    }
}

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:32: [ \t\r ]+ :
#line 32 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ /* Ignorar espacios en blanco */ }

            break;
          case 2: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:34: \n :
#line 34 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ num_lines++; }

            break;
          case 3: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:36: "//".* :
#line 36 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ /* ignore line comments */ }

            break;
          case 4: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:38: "/*" :
#line 38 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ start(COMMENT); };
            break;
          case 5: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:46: ";" :
#line 46 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::SEMICOLON; }
            break;
          case 6: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:47: "{" :
#line 47 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OPEN_CURLY; }
            break;
          case 7: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:48: "}" :
#line 48 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::CLOSE_CURLY; }
            break;
          case 8: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:49: "[" :
#line 49 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OPEN_BRACKET; }
            break;
          case 9: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:50: "]" :
#line 50 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::CLOSE_BRACKET; }
            break;
          case 10: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:51: "(" :
#line 51 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OPEN_PAR; }
            break;
          case 11: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:52: ")" :
#line 52 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::CLOSE_PAR; }
            break;
          case 12: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:53: "," :
#line 53 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::COMMA; }

            break;
          case 13: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:56: "&&" :
#line 56 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_BOOL_AND; }
            break;
          case 14: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:57: "||" :
#line 57 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_BOOL_OR; }
            break;
          case 15: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:58: "!" :
#line 58 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_BOOL_NOT; }
            break;
          case 16: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:59: ">" :
#line 59 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_GREATER_THAN; }
            break;
          case 17: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:60: "<" :
#line 60 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_LESS_THAN; }
            break;
          case 18: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:61: ">=" :
#line 61 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_GREATER_EQUAL; }
            break;
          case 19: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:62: "<=" :
#line 62 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_LESS_EQUAL; }
            break;
          case 20: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:63: "==" :
#line 63 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_EQUAL; }
            break;
          case 21: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:64: "!=" :
#line 64 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_NOT_EQUAL; }
            break;
          case 22: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:65: "=" :
#line 65 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_ASSIGN; }
            break;
          case 23: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:66: "+" :
#line 66 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_ADD; }
            break;
          case 24: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:67: "-" :
#line 67 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_SUB; }
            break;
          case 25: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:68: "*" :
#line 68 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_MUL; }
            break;
          case 26: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:69: "/" :
#line 69 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_DIV; }
            break;
          case 27: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:70: "%" :
#line 70 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::OP_MOD; }

            break;
          case 28: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:73: "class" :
#line 73 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_CLASS; }
            break;
          case 29: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:74: "int" :
#line 74 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_INT; }
            break;
          case 30: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:75: "void" :
#line 75 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_VOID; }
            break;
          case 31: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:76: "ref" :
#line 76 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_REF; }
            break;
          case 32: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:77: "if" :
#line 77 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_IF; }
            break;
          case 33: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:78: "else" :
#line 78 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_ELSE; }
            break;
          case 34: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:79: "while" :
#line 79 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_WHILE; }
            break;
          case 35: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:80: "return" :
#line 80 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_RETURN; }
            break;
          case 36: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:81: "read" :
#line 81 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_READ; }
            break;
          case 37: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:82: "print" :
#line 82 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ return Token::KW_PRINT; }




            break;
          case 38: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:87: ("-")?{DIGIT}+ :
#line 87 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{
    yylval->emplace<int>(std::stol(text(), nullptr, 10));
    return Token::INT_CONST;
}

            break;
          case 39: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:92: \"([^\\\"]|\\.)*\" :
#line 92 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{
    yylval->emplace<std::string>(text());
    return Token::STRING_LITERAL;
}

            break;
          case 40: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:97: [_a-z_A-Z][_a-z_A-Z_0-9]* :
#line 97 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{
    yylval->emplace<std::string>(text());
    return Token::IDENTIFIER;
}


            break;
          case 41: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:103: . :
#line 103 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{
    num_chars++;
    return Token::Error;
 }

            break;
        }
        break;
      case COMMENT:
        matcher().pattern(PATTERN_COMMENT);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 42 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ std::cerr << "Error: EOF en comentario de bloque\n"; return Token::Error; }


            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:39: [^*]+ :
#line 39 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ /* ignores anything but * */ }
            break;
          case 2: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:40: "*"+[^*/]* :
#line 40 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ /* ignores * */ }
            break;
          case 3: // rule /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l:41: "*"+"/" :
#line 41 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"
{ start(INITIAL); }  // block comment end
            break;
        }
        break;
      default:
        start(0);
    }
  }
}
