// MiniJavaLexer.hpp generated by reflex 5.1.1 from /home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l

#ifndef REFLEX_MINIJAVALEXER_HPP
#define REFLEX_MINIJAVALEXER_HPP
#define IN_HEADER 1
#define REFLEX_VERSION "5.1.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_header_file         "MiniJavaLexer.hpp"
#define REFLEX_OPTION_lex                 nextToken
#define REFLEX_OPTION_lexer               MiniJavaLexer
#define REFLEX_OPTION_outfile             "MiniJavaLexer.cpp"
#define REFLEX_OPTION_params              Expr::Parser::value_type *yylval

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 18 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"

    #include "MiniJavaParser.hpp"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class MiniJavaLexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 22 "/home/josuedejesus/ProyectoCompiladores2/MiniJavaLexer.l"

using Token = Expr::Parser::token;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  MiniJavaLexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int COMMENT = 1;
  // the lexer function defined by SECTION 2
  virtual int nextToken(Expr::Parser::value_type *yylval);
  // lexer functions accepting new input to scan
  int nextToken(const reflex::Input& input, Expr::Parser::value_type *yylval)
  {
    in(input);
    return nextToken(yylval);
  }
  int nextToken(const reflex::Input& input, std::ostream *os, Expr::Parser::value_type *yylval)
  {
    in(input);
    if (os)
      out(*os);
    return nextToken(yylval);
  }
};

#endif
